# Continuous Integration - builds and tests on Ubuntu
#
# Runs on:
#   - Push to main/master branch
#   - Pull requests
#   - Manual trigger

name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    name: Test (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        include:
          - elixir: "1.17"
            otp: "26"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip build-essential

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile (downloads Vosk library)
        run: mix compile --warnings-as-errors

      - name: Verify Vosk library downloaded
        run: |
          NATIVE_LIB="_build/dev/lib/vosk_ex/priv/native/linux-x86_64/libvosk.so"
          if [ ! -f "$NATIVE_LIB" ]; then
            echo "ERROR: Vosk library not found at $NATIVE_LIB"
            echo "Contents of _build/dev/lib/vosk_ex/priv/:"
            ls -lR _build/dev/lib/vosk_ex/priv/ || echo "Directory does not exist"
            exit 1
          fi
          echo "‚úì Vosk library found: $NATIVE_LIB"
          ls -lh "$NATIVE_LIB"

      - name: Verify NIF compiled
        run: |
          NIF_FILE="_build/dev/lib/vosk_ex/priv/vosk_nif.so"
          if [ ! -f "$NIF_FILE" ]; then
            echo "ERROR: NIF not compiled at $NIF_FILE"
            exit 1
          fi
          echo "‚úì NIF compiled: $NIF_FILE"
          ls -lh "$NIF_FILE"

      - name: Check formatting
        run: mix format --check-formatted
        if: ${{ matrix.elixir == '1.17' }} # Only check on one version

      - name: Run tests (unit only, no model required)
        run: mix test --exclude integration

      - name: Verify NIF loads
        run: mix run -e "VoskEx.set_log_level(-1); IO.puts('‚úì NIF loaded successfully')"

  verify-package:
    name: Verify Hex package
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.17"
          otp-version: "26"

      - name: Install dependencies
        run: mix deps.get

      - name: Build Hex package
        run: mix hex.build

      - name: Check package size
        run: |
          SIZE=$(stat -c%s vosk_ex-*.tar)
          SIZE_KB=$((SIZE / 1024))
          echo "üì¶ Package size: ${SIZE_KB}KB"

          # Package should be small (< 100KB) since we don't bundle DLLs
          if [ $SIZE_KB -gt 100 ]; then
            echo "‚ùå ERROR: Package is too large (${SIZE_KB}KB > 100KB)"
            echo "This suggests DLLs or build artifacts are being included."
            echo ""
            echo "Package contents:"
            mix hex.build --unpack
            exit 1
          fi

          echo "‚úÖ Package size is reasonable"

      - name: Verify package contents
        run: |
          echo "üìã Verifying critical files are included..."

          FILES=$(mix hex.build --unpack 2>&1)

          for file in "Makefile" "Makefile.win" "download_vosk.ps1" "c_src/vosk_nif.c" "lib/vosk_ex.ex" "scripts/windows/run.ps1"; do
            if echo "$FILES" | grep -q "$file"; then
              echo "‚úÖ $file"
            else
              echo "‚ùå Missing: $file"
              exit 1
            fi
          done

          echo ""
          echo "‚úÖ All critical files present"
